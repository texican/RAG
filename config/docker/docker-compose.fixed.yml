services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: rag-postgres
    environment:
      POSTGRES_DB: rag_enterprise
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d rag_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag-network

  # Redis Stack (includes RediSearch for vector operations)
  redis:
    image: redis/redis-stack:latest
    container_name: rag-redis
    ports:
      - "6379:6379"
      - "8001:8001"  # RedisInsight UI
    volumes:
      - redis_data:/data
    environment:
      REDIS_ARGS: "--requirepass redis_password"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag-network

  # Authentication Service - JWT auth, user/tenant management
  rag-auth:
    build:
      context: ../../
      dockerfile: rag-auth-service/Dockerfile
    container_name: rag-auth
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_NAME=rag_enterprise
      - DB_USERNAME=rag_user
      - DB_PASSWORD=rag_password
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
      - JWT_SECRET=YourVerySecureJWTSecretKeyThatIsAtLeast256BitsLongForHS256Algorithm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rag-network

  # Admin Service - System administration, tenant management, analytics
  rag-admin:
    build:
      context: ../../
      dockerfile: rag-admin-service/Dockerfile
    container_name: rag-admin
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_NAME=rag_enterprise
      - DB_USERNAME=rag_user
      - DB_PASSWORD=rag_password
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
      - JWT_SECRET=YourVerySecureJWTSecretKeyThatIsAtLeast256BitsLongForHS256Algorithm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rag-auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rag-network

  # Document Service - File processing, text extraction, and chunking
  rag-document:
    build:
      context: ../../
      dockerfile: rag-document-service/Dockerfile
    container_name: rag-document
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_NAME=rag_enterprise
      - DB_USERNAME=rag_user
      - DB_PASSWORD=rag_password
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rag-network

  # Embedding Service - Vector generation and similarity search  
  rag-embedding:
    build:
      context: ../../
      dockerfile: rag-embedding-service/Dockerfile
    container_name: rag-embedding
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rag-network

  # Core Service - RAG pipeline orchestration and LLM integration
  rag-core:
    build:
      context: ../../
      dockerfile: rag-core-service/Dockerfile
    container_name: rag-core
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EMBEDDING_SERVICE_URL=http://rag-embedding:8083
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
      - OLLAMA_ENABLED=false
      - OPENAI_ENABLED=true
      - OPENAI_API_KEY=demo-key
    depends_on:
      redis:
        condition: service_healthy
      rag-embedding:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rag-network

  # API Gateway Service - Routes all external traffic
  rag-gateway:
    build:
      context: ../../
      dockerfile: rag-gateway/Dockerfile
    container_name: rag-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
      - AUTH_SERVICE_URL=http://rag-auth:8081
      - DOCUMENT_SERVICE_URL=http://rag-document:8082
      - EMBEDDING_SERVICE_URL=http://rag-embedding:8083
      - CORE_SERVICE_URL=http://rag-core:8084
      - ADMIN_SERVICE_URL=http://rag-admin:8085
      - JWT_SECRET=YourVerySecureJWTSecretKeyThatIsAtLeast256BitsLongForHS256Algorithm
    depends_on:
      redis:
        condition: service_healthy
      rag-auth:
        condition: service_healthy
      rag-document:
        condition: service_healthy
      rag-embedding:
        condition: service_healthy
      rag-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rag-network

volumes:
  postgres_data:
  redis_data:

networks:
  rag-network:
    driver: bridge