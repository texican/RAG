{
	"info": {
		"_postman_id": "core-service-rag-collection",
		"name": "BYO RAG - Core Service Collection",
		"description": "RAG Core Service API Collection for the BYO RAG System\n\n🤖 **Service URL**: http://localhost:8084 (Docker deployment)\n📊 **Service Status**: Fully operational with complete RAG pipeline integration\n🏗️ **Architecture**: Complete RAG orchestration with Spring AI, LLM integration, and streaming capabilities\n\n**Core RAG Capabilities:**\n- **Query Processing**: Complete RAG pipeline with context retrieval and generation\n- **LLM Integration**: Multi-provider AI integration (OpenAI, Anthropic, Ollama)\n- **Streaming Responses**: Real-time token streaming with Server-Sent Events (SSE)\n- **Conversation Management**: Multi-turn dialogue with context memory\n- **Query Optimization**: Advanced query analysis and suggestions\n- **Context Assembly**: Intelligent document chunk compilation and ranking\n\n**Production AI Features:**\n- **Multi-Model Support**: GPT-4, GPT-3.5, Claude, Ollama local models\n- **Response Streaming**: Real-time token streaming for improved UX\n- **Context Retrieval**: Semantic document search with relevance ranking\n- **Query Enhancement**: Automatic query optimization and expansion\n- **Performance Monitoring**: Comprehensive statistics and health monitoring\n\n**RAG Pipeline Stages:**\n1. Query analysis and intent detection\n2. Semantic search for relevant document chunks\n3. Context assembly and ranking\n4. LLM prompt construction with retrieved context\n5. Response generation with streaming output\n6. Conversation state management\n\n**Environment Variables:**\n- `CORE_SERVICE_URL`: http://localhost:8084\n- `AUTH_TOKEN`: JWT authentication token\n- `TENANT_ID`: Tenant identifier for multi-tenancy\n- `CONVERSATION_ID`: Conversation identifier for multi-turn dialogues",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "byo-rag-core-service"
	},
	"item": [
		{
			"name": "🤖 RAG Query Processing",
			"description": "Core RAG query processing and response generation",
			"item": [
				{
					"name": "RAG Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains RAG answer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('answer');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.answer).to.be.a('string');",
									"    pm.expect(jsonData.answer.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response includes context sources\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('sources');",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    if (jsonData.sources.length > 0) {",
									"        var firstSource = jsonData.sources[0];",
									"        pm.expect(firstSource).to.have.property('chunkId');",
									"        pm.expect(firstSource).to.have.property('documentId');",
									"        pm.expect(firstSource).to.have.property('relevanceScore');",
									"    }",
									"});",
									"",
									"pm.test(\"Processing status is success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('SUCCESS');",
									"});",
									"",
									"// Save conversation ID if present",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.conversationId) {",
									"        pm.environment.set('CONVERSATION_ID', jsonData.conversationId);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token and tenant ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenantId\": \"{{TENANT_ID}}\",\n  \"query\": \"What are the key benefits and applications of machine learning in modern business?\",\n  \"maxResults\": 5,\n  \"temperature\": 0.7,\n  \"includeContext\": true,\n  \"model\": \"gpt-3.5-turbo\",\n  \"conversationId\": null,\n  \"contextFilters\": {\n    \"documentIds\": [],\n    \"categories\": [\"Technical Documentation\"],\n    \"tags\": [\"machine-learning\", \"business\"]\n  }\n}"
						},
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/query",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"query"
							]
						},
						"description": "Submit a RAG query for processing with document context retrieval and LLM generation.\n\n**Request Body:**\n- `tenantId`: Tenant identifier for scoped processing (required)\n- `query`: Natural language question or request (required)\n- `maxResults`: Maximum context chunks to retrieve (default: 5, max: 20)\n- `temperature`: LLM creativity parameter (0.0-2.0, default: 0.7)\n- `includeContext`: Include source context in response (default: true)\n- `model`: LLM model to use (gpt-4, gpt-3.5-turbo, claude-3, ollama-llama2)\n- `conversationId`: Continue existing conversation (optional)\n- `contextFilters`: Filters for context retrieval (optional)\n\n**RAG Pipeline Process:**\n1. **Query Analysis**: Intent detection and query optimization\n2. **Context Retrieval**: Semantic search across document embeddings\n3. **Context Ranking**: Relevance scoring and context assembly\n4. **Prompt Construction**: LLM prompt with retrieved context\n5. **Response Generation**: AI-generated answer with source attribution\n6. **Post-Processing**: Response validation and formatting\n\n**Response:**\n- `answer`: AI-generated response to the query\n- `sources`: Array of source document chunks used for context\n- `conversationId`: Conversation identifier for follow-up queries\n- `status`: Processing status (SUCCESS, PARTIAL, FAILED)\n- `processingTimeMs`: Total pipeline execution time\n- `model`: LLM model used for generation\n- `contextUsed`: Number of context chunks utilized\n\n**Context Filters:**\n- `documentIds`: Limit context to specific documents\n- `categories`: Filter by document categories\n- `tags`: Filter by document tags\n- `dateRange`: Filter by document creation/update dates\n- `relevanceThreshold`: Minimum relevance score for context inclusion"
					},
					"response": [
						{
							"name": "Successful RAG Query",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_TOKEN}}"
									},
									{
										"key": "X-Tenant-ID",
										"value": "{{TENANT_ID}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tenantId\": \"tenant-123\",\n  \"query\": \"What is machine learning?\",\n  \"maxResults\": 3,\n  \"temperature\": 0.7,\n  \"includeContext\": true\n}"
								},
								"url": {
									"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/query",
									"host": [
										"{{CORE_SERVICE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"rag",
										"query"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"answer\": \"Machine learning is a subset of artificial intelligence (AI) that focuses on algorithms and statistical models that enable computer systems to improve their performance on a specific task through experience, without being explicitly programmed. Based on the retrieved context, machine learning algorithms can be categorized into supervised, unsupervised, and reinforcement learning approaches. These algorithms learn patterns from data and can make predictions or decisions on new, unseen information.\",\n  \"sources\": [\n    {\n      \"chunkId\": \"chunk-abc123\",\n      \"documentId\": \"doc-456789\",\n      \"title\": \"ML Fundamentals Guide\",\n      \"text\": \"Machine learning algorithms can be categorized into supervised, unsupervised, and reinforcement learning approaches.\",\n      \"relevanceScore\": 0.92,\n      \"chunkIndex\": 5\n    },\n    {\n      \"chunkId\": \"chunk-def456\",\n      \"documentId\": \"doc-789012\",\n      \"title\": \"AI Training Methods\",\n      \"text\": \"Machine learning models require training data to learn patterns and make predictions on new, unseen data.\",\n      \"relevanceScore\": 0.89,\n      \"chunkIndex\": 8\n    }\n  ],\n  \"conversationId\": \"conv-123e4567-e89b-12d3-a456-426614174000\",\n  \"status\": \"SUCCESS\",\n  \"processingTimeMs\": 1250,\n  \"model\": \"gpt-3.5-turbo\",\n  \"contextUsed\": 2,\n  \"queryAnalysis\": {\n    \"intent\": \"definition_request\",\n    \"confidence\": 0.95,\n    \"keywords\": [\"machine\", \"learning\"],\n    \"expandedQuery\": \"machine learning definition algorithms AI artificial intelligence\"\n  },\n  \"tenantId\": \"tenant-123\",\n  \"timestamp\": \"2023-08-31T10:30:00Z\"\n}"
						}
					]
				},
				{
					"name": "RAG Query (Async)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response contains job information\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('jobId');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('estimatedCompletionTime');",
									"    pm.environment.set('RAG_JOB_ID', jsonData.jobId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token and tenant ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenantId\": \"{{TENANT_ID}}\",\n  \"query\": \"Provide a comprehensive analysis of deep learning architectures, including their applications, advantages, and limitations in various domains such as computer vision, natural language processing, and autonomous systems.\",\n  \"maxResults\": 15,\n  \"temperature\": 0.5,\n  \"includeContext\": true,\n  \"model\": \"gpt-4\",\n  \"contextFilters\": {\n    \"categories\": [\"Technical Documentation\", \"Research Paper\"]\n  }\n}"
						},
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/query/async",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"query",
								"async"
							]
						},
						"description": "Submit an asynchronous RAG query for complex, long-running processing.\n\n**Benefits:**\n- Non-blocking processing for complex queries\n- Support for extensive context retrieval\n- Advanced LLM models with longer processing times\n- Background processing with job tracking\n\n**Response:**\n- `jobId`: Unique identifier for tracking the async job\n- `status`: Initial job status (QUEUED, PROCESSING)\n- `estimatedCompletionTime`: Expected completion timestamp\n- `queuePosition`: Position in processing queue\n\n**Use Cases:**\n- Complex analytical queries requiring extensive research\n- Large-scale document analysis\n- Multi-step reasoning tasks\n- Comprehensive report generation"
					}
				},
				{
					"name": "RAG Query (Streaming)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is Server-Sent Events\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
									"});",
									"",
									"pm.test(\"Response contains streaming data\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('data:');",
									"    pm.expect(responseText).to.include('event:');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token and tenant ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/event-stream"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenantId\": \"{{TENANT_ID}}\",\n  \"query\": \"Explain the evolution of artificial intelligence from early expert systems to modern large language models, including key milestones and breakthrough technologies.\",\n  \"maxResults\": 8,\n  \"temperature\": 0.8,\n  \"includeContext\": true,\n  \"model\": \"gpt-4\",\n  \"stream\": true\n}"
						},
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/query/stream",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"query",
								"stream"
							]
						},
						"description": "Submit a RAG query with real-time streaming response using Server-Sent Events.\n\n**Streaming Protocol:**\n- Uses Server-Sent Events (SSE) protocol\n- Real-time token-by-token response delivery\n- Progress updates and status notifications\n- Context sources delivered before streaming begins\n\n**Stream Event Types:**\n- `context`: Retrieved document chunks and sources\n- `token`: Individual response tokens as they're generated\n- `status`: Processing status updates\n- `complete`: Final completion notification with metadata\n- `error`: Error notifications and failure details\n\n**Benefits:**\n- Improved user experience with real-time feedback\n- Reduced perceived latency for long responses\n- Progressive content delivery\n- Better handling of connection issues\n\n**Use Cases:**\n- Interactive chat applications\n- Real-time content generation\n- Long-form response generation\n- Live demonstration and presentation scenarios"
					}
				},
				{
					"name": "Check Async Job Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Job status information present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('jobId');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('progress');",
									"});",
									"",
									"pm.test(\"Progress is valid percentage\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.progress).to.be.at.least(0);",
									"    pm.expect(jsonData.progress).to.be.at.most(100);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token, tenant ID, and job ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}",
									"if (!pm.environment.get('RAG_JOB_ID')) {",
									"    throw new Error('RAG_JOB_ID not found. Please start an async job first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							}
						],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/jobs/{{RAG_JOB_ID}}",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"jobs",
								"{{RAG_JOB_ID}}"
							]
						},
						"description": "Check the status and progress of an asynchronous RAG query job.\n\n**Response:**\n- `jobId`: Job identifier\n- `status`: Current job status (QUEUED, PROCESSING, COMPLETED, FAILED)\n- `progress`: Completion percentage (0-100)\n- `currentStage`: Current pipeline stage being processed\n- `startTime`: Job start timestamp\n- `estimatedCompletion`: Updated completion time estimate\n- `result`: RAG response (when status is COMPLETED)\n- `error`: Error information (when status is FAILED)\n\n**Pipeline Stages:**\n- `QUERY_ANALYSIS`: Analyzing and optimizing the input query\n- `CONTEXT_RETRIEVAL`: Searching for relevant document chunks\n- `CONTEXT_RANKING`: Scoring and ranking retrieved context\n- `LLM_PROCESSING`: Generating response with language model\n- `POST_PROCESSING`: Finalizing and validating the response"
					}
				},
				{
					"name": "Get Job Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Results contain RAG response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('answer');",
									"    pm.expect(jsonData).to.have.property('sources');",
									"});",
									"",
									"pm.test(\"Job completed successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('COMPLETED');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token, tenant ID, and job ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}",
									"if (!pm.environment.get('RAG_JOB_ID')) {",
									"    throw new Error('RAG_JOB_ID not found. Please start an async job first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							}
						],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/jobs/{{RAG_JOB_ID}}/results",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"jobs",
								"{{RAG_JOB_ID}}",
								"results"
							]
						},
						"description": "Retrieve the results of a completed asynchronous RAG query job.\n\n**Response (when job is COMPLETED):**\n- Complete RAG response with generated answer\n- Source document chunks and context information\n- Processing statistics and performance metrics\n- Conversation context for follow-up queries\n\n**Note:**\n- Only available when job status is COMPLETED or FAILED\n- Results are cached for 24 hours after completion\n- Large responses may include pagination links"
					}
				}
			]
		},
		{
			"name": "💬 Conversation Management",
			"description": "Multi-turn conversation and dialogue management",
			"item": [
				{
					"name": "Continue Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response maintains conversation context\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversationId');",
									"    pm.expect(jsonData).to.have.property('answer');",
									"    pm.expect(jsonData).to.have.property('messageCount');",
									"    pm.expect(jsonData.conversationId).to.eql(pm.environment.get('CONVERSATION_ID'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token, tenant ID, and conversation ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}",
									"if (!pm.environment.get('CONVERSATION_ID')) {",
									"    throw new Error('CONVERSATION_ID not found. Please start a conversation first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenantId\": \"{{TENANT_ID}}\",\n  \"query\": \"Can you elaborate on the supervised learning approach you mentioned earlier?\",\n  \"conversationId\": \"{{CONVERSATION_ID}}\",\n  \"maxResults\": 5,\n  \"temperature\": 0.7,\n  \"includeContext\": true,\n  \"model\": \"gpt-3.5-turbo\"\n}"
						},
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/query",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"query"
							]
						},
						"description": "Continue an existing conversation with context memory and dialogue history.\n\n**Conversation Features:**\n- **Context Memory**: Previous messages maintained for coherent dialogue\n- **Reference Resolution**: Understanding of pronouns and references to earlier content\n- **Topic Continuity**: Maintains subject focus across multiple exchanges\n- **Incremental Learning**: Builds upon previously retrieved context\n\n**Benefits:**\n- Natural multi-turn dialogue experience\n- Reduced need to repeat context in follow-up questions\n- Improved relevance through conversation history\n- Better handling of clarifying questions and refinements"
					}
				},
				{
					"name": "Get Conversation History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains conversation data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversationId');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"    pm.expect(jsonData.messages).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Messages have proper structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.messages.length > 0) {",
									"        var firstMessage = jsonData.messages[0];",
									"        pm.expect(firstMessage).to.have.property('role');",
									"        pm.expect(firstMessage).to.have.property('content');",
									"        pm.expect(firstMessage).to.have.property('timestamp');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token, tenant ID, and conversation ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}",
									"if (!pm.environment.get('CONVERSATION_ID')) {",
									"    throw new Error('CONVERSATION_ID not found. Please start a conversation first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							}
						],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/conversations/{{CONVERSATION_ID}}",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"conversations",
								"{{CONVERSATION_ID}}"
							]
						},
						"description": "Retrieve the complete history of a conversation.\n\n**Response:**\n- `conversationId`: Unique conversation identifier\n- `messages`: Array of conversation messages\n- `createdAt`: Conversation start timestamp\n- `updatedAt`: Last message timestamp\n- `messageCount`: Total number of messages\n- `contextSummary`: Conversation topic summary\n- `participants`: User and assistant information\n\n**Message Structure:**\n- `role`: Message sender (user, assistant, system)\n- `content`: Message text content\n- `timestamp`: Message creation time\n- `sources`: Context sources used (for assistant messages)\n- `metadata`: Additional message metadata"
					}
				},
				{
					"name": "List User Conversations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is paginated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('totalElements');",
									"    pm.expect(jsonData).to.have.property('totalPages');",
									"    pm.expect(jsonData.content).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Conversations belong to tenant\", function () {",
									"    var jsonData = pm.response.json();",
									"    var expectedTenantId = pm.environment.get('TENANT_ID');",
									"    jsonData.content.forEach(function(conversation) {",
									"        pm.expect(conversation.tenantId).to.eql(expectedTenantId);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token and tenant ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							}
						],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/conversations?page=0&size=20&sort=updatedAt,desc",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"conversations"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"description": "Page number (0-based)"
								},
								{
									"key": "size",
									"value": "20",
									"description": "Number of items per page"
								},
								{
									"key": "sort",
									"value": "updatedAt,desc",
									"description": "Sort criteria"
								}
							]
						},
						"description": "Get paginated list of user conversations within the current tenant.\n\n**Query Parameters:**\n- `page`: Page number (0-based, default: 0)\n- `size`: Items per page (default: 20, max: 100)\n- `sort`: Sort criteria (updatedAt,desc | createdAt,desc | messageCount,desc)\n\n**Response:**\n- Paginated list of conversation summaries\n- Each conversation includes basic metadata\n- Total count and page information\n- Tenant-scoped results only"
					}
				},
				{
					"name": "Delete Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 or 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token, tenant ID, and conversation ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}",
									"if (!pm.environment.get('CONVERSATION_ID')) {",
									"    throw new Error('CONVERSATION_ID not found. Please start a conversation first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							}
						],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/conversations/{{CONVERSATION_ID}}",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"conversations",
								"{{CONVERSATION_ID}}"
							]
						},
						"description": "Delete a conversation and its complete message history.\n\n**Behavior:**\n- Removes conversation and all associated messages\n- Clears conversation context from memory\n- Updates conversation statistics\n- Maintains audit trail for deletion\n\n**Use Cases:**\n- Privacy and data cleanup\n- Conversation management\n- Storage optimization\n- User preference compliance"
					}
				}
			]
		},
		{
			"name": "🔍 Query Analysis & Optimization",
			"description": "Query optimization and analysis operations",
			"item": [
				{
					"name": "Analyze Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Analysis contains key insights\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('intent');",
									"    pm.expect(jsonData).to.have.property('confidence');",
									"    pm.expect(jsonData).to.have.property('keywords');",
									"    pm.expect(jsonData).to.have.property('suggestions');",
									"});",
									"",
									"pm.test(\"Confidence score is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.confidence).to.be.at.least(0);",
									"    pm.expect(jsonData.confidence).to.be.at.most(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token and tenant ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"How do neural networks learn and what are the different types?\",\n  \"includeSuggestions\": true,\n  \"analyzeComplexity\": true,\n  \"contextHints\": {\n    \"domain\": \"machine-learning\",\n    \"audience\": \"technical\"\n  }\n}"
						},
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/query/analyze",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"query",
								"analyze"
							]
						},
						"description": "Analyze query structure and provide optimization suggestions.\n\n**Request Body:**\n- `query`: Query text to analyze (required)\n- `includeSuggestions`: Include optimization suggestions (default: true)\n- `analyzeComplexity`: Analyze query complexity and scope (default: true)\n- `contextHints`: Additional context for analysis (optional)\n\n**Analysis Features:**\n- **Intent Detection**: Classify query type and purpose\n- **Keyword Extraction**: Identify key terms and concepts\n- **Complexity Analysis**: Assess query scope and difficulty\n- **Optimization Suggestions**: Recommend query improvements\n- **Context Recommendations**: Suggest relevant filtering options\n\n**Response:**\n- `intent`: Detected query intent (definition, comparison, explanation, etc.)\n- `confidence`: Intent detection confidence score (0.0-1.0)\n- `keywords`: Extracted key terms and phrases\n- `entities`: Named entities and their types\n- `complexity`: Query complexity assessment\n- `suggestions`: Optimization recommendations\n- `relatedQueries`: Similar or follow-up queries\n- `contextFilters`: Recommended document filters\n\n**Use Cases:**\n- Query optimization and enhancement\n- User guidance and assistance\n- Content discovery and exploration\n- Search quality improvement"
					},
					"response": [
						{
							"name": "Query Analysis Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_TOKEN}}"
									},
									{
										"key": "X-Tenant-ID",
										"value": "{{TENANT_ID}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": \"machine learning\",\n  \"includeSuggestions\": true,\n  \"analyzeComplexity\": true\n}"
								},
								"url": {
									"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/query/analyze",
									"host": [
										"{{CORE_SERVICE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"rag",
										"query",
										"analyze"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"intent\": \"definition_request\",\n  \"confidence\": 0.85,\n  \"keywords\": [\"machine\", \"learning\", \"algorithms\", \"AI\"],\n  \"entities\": [\n    {\n      \"text\": \"machine learning\",\n      \"type\": \"TECHNOLOGY\",\n      \"confidence\": 0.95\n    }\n  ],\n  \"complexity\": {\n    \"level\": \"medium\",\n    \"scope\": \"broad\",\n    \"expectedContextSize\": 8,\n    \"processingTime\": \"fast\"\n  },\n  \"suggestions\": [\n    \"Consider specifying which aspect of machine learning interests you most (algorithms, applications, theory)\",\n    \"Add context about your background level (beginner, intermediate, advanced)\",\n    \"Specify the domain or industry you're interested in\"\n  ],\n  \"relatedQueries\": [\n    \"What are the types of machine learning algorithms?\",\n    \"How does machine learning differ from traditional programming?\",\n    \"What are real-world applications of machine learning?\"\n  ],\n  \"contextFilters\": {\n    \"recommendedCategories\": [\"Technical Documentation\", \"Tutorial\"],\n    \"recommendedTags\": [\"machine-learning\", \"algorithms\", \"AI\"],\n    \"minimumRelevance\": 0.7\n  },\n  \"queryExpansion\": {\n    \"expandedTerms\": [\"artificial intelligence\", \"neural networks\", \"deep learning\"],\n    \"synonyms\": [\"ML\", \"automated learning\", \"statistical learning\"],\n    \"relatedConcepts\": [\"supervised learning\", \"unsupervised learning\", \"reinforcement learning\"]\n  }\n}"
						}
					]
				},
				{
					"name": "Get Query Suggestions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains suggestions\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('suggestions');",
									"    pm.expect(jsonData.suggestions).to.be.an('array');",
									"    pm.expect(jsonData.suggestions.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Suggestions have proper structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.suggestions.length > 0) {",
									"        var firstSuggestion = jsonData.suggestions[0];",
									"        pm.expect(firstSuggestion).to.have.property('query');",
									"        pm.expect(firstSuggestion).to.have.property('category');",
									"        pm.expect(firstSuggestion).to.have.property('popularity');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token and tenant ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							}
						],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/query/suggestions?prefix=machine&limit=10&category=technical",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"query",
								"suggestions"
							],
							"query": [
								{
									"key": "prefix",
									"value": "machine",
									"description": "Query prefix for autocomplete"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Maximum number of suggestions"
								},
								{
									"key": "category",
									"value": "technical",
									"description": "Filter by suggestion category"
								}
							]
						},
						"description": "Get query suggestions and autocomplete options based on popular queries and content.\n\n**Query Parameters:**\n- `prefix`: Query prefix for autocomplete (optional)\n- `limit`: Maximum number of suggestions (default: 10, max: 50)\n- `category`: Filter by query category (technical, business, general)\n\n**Response:**\n- `suggestions`: Array of suggested queries\n- `categories`: Available suggestion categories\n- `totalSuggestions`: Total number of available suggestions\n\n**Suggestion Properties:**\n- `query`: Suggested query text\n- `category`: Query category or topic area\n- `popularity`: Usage frequency score\n- `description`: Brief description of what the query returns\n- `estimatedResults`: Expected number of relevant results\n\n**Use Cases:**\n- Query autocomplete and assistance\n- Content discovery and exploration\n- User guidance for effective querying\n- Popular topic identification"
					}
				}
			]
		},
		{
			"name": "📊 Analytics & Statistics",
			"description": "RAG analytics, statistics, and performance monitoring",
			"item": [
				{
					"name": "Get RAG Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Statistics include key metrics\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('totalQueries');",
									"    pm.expect(jsonData).to.have.property('averageResponseTime');",
									"    pm.expect(jsonData).to.have.property('successRate');",
									"    pm.expect(jsonData).to.have.property('tenantId');",
									"});",
									"",
									"pm.test(\"Statistics are tenant-scoped\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('TENANT_ID'));",
									"});",
									"",
									"pm.test(\"Success rate is valid percentage\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successRate).to.be.at.least(0);",
									"    pm.expect(jsonData.successRate).to.be.at.most(100);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token and tenant ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							}
						],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/stats?timeRange=7d",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"stats"
							],
							"query": [
								{
									"key": "timeRange",
									"value": "7d",
									"description": "Time range for statistics (1h, 24h, 7d, 30d)"
								}
							]
						},
						"description": "Get comprehensive RAG system statistics and performance metrics.\n\n**Query Parameters:**\n- `timeRange`: Statistics time window (1h, 24h, 7d, 30d, all)\n\n**Response Metrics:**\n- `totalQueries`: Total number of processed queries\n- `successfulQueries`: Number of successful responses\n- `failedQueries`: Number of failed processing attempts\n- `averageResponseTime`: Mean response time in milliseconds\n- `successRate`: Success percentage (0-100)\n- `popularQueries`: Most frequently asked questions\n- `modelUsage`: Usage breakdown by LLM model\n- `contextEffectiveness`: Context relevance and utilization metrics\n- `conversationStats`: Multi-turn dialogue statistics\n- `performanceTrends`: Time-series performance data\n\n**Performance Metrics:**\n- Query processing latency percentiles\n- Context retrieval performance\n- LLM response generation times\n- End-to-end pipeline performance\n- Error rates and failure categories\n\n**Use Cases:**\n- System performance monitoring\n- Usage analytics and reporting\n- Performance optimization insights\n- Capacity planning and scaling\n- Quality assurance and improvement"
					}
				},
				{
					"name": "Get Popular Queries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains popular queries\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('queries');",
									"    pm.expect(jsonData.queries).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Queries have usage counts\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.queries.length > 0) {",
									"        var firstQuery = jsonData.queries[0];",
									"        pm.expect(firstQuery).to.have.property('query');",
									"        pm.expect(firstQuery).to.have.property('count');",
									"        pm.expect(firstQuery).to.have.property('category');",
									"        pm.expect(firstQuery.count).to.be.a('number');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token and tenant ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							}
						],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/stats/popular-queries?limit=20&timeRange=30d",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"stats",
								"popular-queries"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "Maximum number of queries to return"
								},
								{
									"key": "timeRange",
									"value": "30d",
									"description": "Time range for popularity analysis"
								}
							]
						},
						"description": "Get most popular and frequently asked queries.\n\n**Query Parameters:**\n- `limit`: Maximum number of queries to return (default: 50)\n- `timeRange`: Time window for analysis (7d, 30d, 90d, all)\n\n**Response:**\n- `queries`: Array of popular queries with usage statistics\n- `totalUniqueQueries`: Total number of unique queries in period\n- `queryTrends`: Popularity trends and changes\n- `categories`: Popular query categories\n\n**Query Properties:**\n- `query`: Query text (anonymized if privacy enabled)\n- `count`: Number of times asked\n- `category`: Detected query category\n- `averageRating`: User satisfaction rating\n- `successRate`: Query success percentage\n- `lastAsked`: Most recent occurrence\n\n**Use Cases:**\n- Content gap analysis\n- FAQ generation and updates\n- User behavior analysis\n- Content strategy optimization\n- Knowledge base improvement"
					}
				},
				{
					"name": "Get Performance Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Performance metrics present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('responseTime');",
									"    pm.expect(jsonData).to.have.property('throughput');",
									"    pm.expect(jsonData).to.have.property('errorRate');",
									"});",
									"",
									"pm.test(\"Response time metrics valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.responseTime) {",
									"        pm.expect(jsonData.responseTime).to.have.property('p50');",
									"        pm.expect(jsonData.responseTime).to.have.property('p95');",
									"        pm.expect(jsonData.responseTime).to.have.property('p99');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if auth token and tenant ID exist",
									"if (!pm.environment.get('AUTH_TOKEN')) {",
									"    throw new Error('AUTH_TOKEN not found. Please login first.');",
									"}",
									"if (!pm.environment.get('TENANT_ID')) {",
									"    throw new Error('TENANT_ID not found. Please login first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}"
							},
							{
								"key": "X-Tenant-ID",
								"value": "{{TENANT_ID}}"
							}
						],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/api/v1/rag/stats/performance?breakdown=pipeline",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"rag",
								"stats",
								"performance"
							],
							"query": [
								{
									"key": "breakdown",
									"value": "pipeline",
									"description": "Performance breakdown level (overall, pipeline, model)"
								}
							]
						},
						"description": "Get detailed performance metrics and bottleneck analysis.\n\n**Query Parameters:**\n- `breakdown`: Level of performance breakdown (overall, pipeline, model)\n\n**Response Metrics:**\n- `responseTime`: Latency percentiles (p50, p90, p95, p99)\n- `throughput`: Queries per second and minute\n- `errorRate`: Error percentage and failure types\n- `pipelineBreakdown`: Performance by RAG pipeline stage\n- `modelPerformance`: LLM-specific performance metrics\n- `contextMetrics`: Context retrieval and relevance statistics\n- `resourceUtilization`: CPU, memory, and I/O usage\n\n**Pipeline Stage Metrics:**\n- Query analysis and optimization time\n- Context retrieval and ranking duration\n- LLM processing and generation time\n- Response post-processing duration\n- End-to-end pipeline latency\n\n**Use Cases:**\n- Performance monitoring and alerting\n- Bottleneck identification and optimization\n- Capacity planning and resource allocation\n- SLA compliance monitoring\n- System tuning and optimization"
					}
				}
			]
		},
		{
			"name": "📊 Health & Monitoring",
			"description": "Service health checks and monitoring endpoints",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is UP\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('UP');",
									"});",
									"",
									"pm.test(\"Dependencies are healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.components) {",
									"        // Check embedding service connectivity",
									"        if (jsonData.components.embeddingService) {",
									"            pm.expect(jsonData.components.embeddingService.status).to.eql('UP');",
									"        }",
									"        // Check LLM service connectivity",
									"        if (jsonData.components.llmService) {",
									"            pm.expect(jsonData.components.llmService.status).to.eql('UP');",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/actuator/health",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Check RAG core service health status and dependencies.\n\n**Response:**\n- Overall service status (UP/DOWN)\n- Embedding service connectivity\n- LLM provider availability\n- Document service integration\n- Database connectivity status\n- Cache and queue system health\n- Performance indicators"
					}
				},
				{
					"name": "Service Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/actuator/info",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"actuator",
								"info"
							]
						},
						"description": "Get RAG core service information and version details."
					}
				},
				{
					"name": "Metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CORE_SERVICE_URL}}/actuator/metrics",
							"host": [
								"{{CORE_SERVICE_URL}}"
							],
							"path": [
								"actuator",
								"metrics"
							]
						},
						"description": "Get available performance metrics for monitoring and observability."
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AUTH_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set service URL if not configured",
					"if (!pm.environment.get('CORE_SERVICE_URL')) {",
					"    pm.environment.set('CORE_SERVICE_URL', 'http://localhost:8084');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-extract conversation IDs from RAG responses",
					"if (pm.response.code === 200 && pm.request.url.toString().includes('/query')) {",
					"    var jsonData = pm.response.json();",
					"    if (jsonData.conversationId) {",
					"        pm.environment.set('CONVERSATION_ID', jsonData.conversationId);",
					"        console.log('✅ Conversation ID saved: ' + jsonData.conversationId);",
					"    }",
					"}",
					"",
					"// Auto-extract job IDs from async operations",
					"if (pm.response.code === 202 && pm.request.url.toString().includes('/async')) {",
					"    var jsonData = pm.response.json();",
					"    if (jsonData.jobId) {",
					"        pm.environment.set('RAG_JOB_ID', jsonData.jobId);",
					"        console.log('✅ RAG job ID saved: ' + jsonData.jobId);",
					"    }",
					"}",
					"",
					"// Performance logging for RAG queries",
					"if (pm.response.code === 200 && pm.request.url.toString().includes('/rag/query')) {",
					"    var jsonData = pm.response.json();",
					"    if (jsonData.processingTimeMs) {",
					"        console.log('🤖 RAG query processed in ' + jsonData.processingTimeMs + 'ms');",
					"        if (jsonData.sources) {",
					"            console.log('📚 Used ' + jsonData.sources.length + ' context sources');",
					"        }",
					"        if (jsonData.model) {",
					"            console.log('🧠 Generated with ' + jsonData.model);",
					"        }",
					"    }",
					"}",
					"",
					"// Log streaming responses",
					"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('text/event-stream')) {",
					"    console.log('🌊 Streaming response received');",
					"    var responseText = pm.response.text();",
					"    var events = responseText.split('\\n\\n').filter(event => event.trim().length > 0);",
					"    console.log('📡 Received ' + events.length + ' stream events');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "CORE_SERVICE_URL",
			"value": "http://localhost:8084",
			"type": "string"
		},
		{
			"key": "AUTH_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "TENANT_ID",
			"value": "",
			"type": "string"
		},
		{
			"key": "CONVERSATION_ID",
			"value": "",
			"type": "string"
		},
		{
			"key": "RAG_JOB_ID",
			"value": "",
			"type": "string"
		}
	]
}